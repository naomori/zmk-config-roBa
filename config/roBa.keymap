#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        lang_toggle {
            bindings = <&kp LC(SPACE)>;
            key-positions = <23 24>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        left_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <12 13>;
        };

        rght_shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <18 19>;
        };

        layer_to_5 {
            bindings = <&lt_to_layer_0 5 LEFT_SHIFT>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        to_copymode: to_copymode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp LEFT_BRACKET>;
            label = "TO_COPYMODE";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp RIGHT_BRACKET>;
            label = "PASTE";
        };

        create_term: create_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp C>;
            label = "CREATE_TERM";
        };

        kill_pane: kill_pane {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp X>;
            label = "KILL_PANE";
        };

        next_term: next_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp N>;
            label = "NEXT_TERM";
        };

        prev_term: prev_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp P>;
            label = "PREV_TERM";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                 &kp W      &kp E      &kp R                       &mt LEFT_COMMAND T                                                            &mt RIGHT_COMMAND Y        &kp U        &kp I      &kp O    &kp P
&kp A                 &kp S      &kp D      &kp F                       &kp G                 &lt_to_layer_0 6 GRAVE      &kp EQUAL                   &kp H                      &kp J        &kp K      &kp L    &kp RETURN
&kp Z                 &kp X      &kp C      &mt LCTRL V                 &kp B                 &lt_to_layer_0 1 COLON      &lt_to_layer_0 1 SEMICOLON  &kp N                      &mt RCTRL M  &kp COMMA  &kp DOT  &kp SLASH
&lt_to_layer_0 3 ESC  &mkp RCLK  &mkp LCLK  &lt_to_layer_0 5 LC(SPACE)  &mt LEFT_SHIFT SPACE  &lt_to_layer_0 2 SPACE      &lt_to_layer_0 2 MINUS      &mt RIGHT_SHIFT BACKSPACE                                   &lt_to_layer_0 3 TAB
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LS(N1)      &kp LS(N2)      &kp LS(N3)        &kp LS(N4)      &kp LS(N5)                             &kp RS(NUMBER_6)  &kp RS(NUMBER_7)  &kp RS(N8)        &kp RS(N9)         &kp RS(N0)
&kp COLON       &kp TILDE       &kp PLUS          &kp UNDERSCORE  &kp PIPE           &trans      &trans  &kp BACKSLASH     &kp MINUS         &kp EQUAL         &kp GRAVE          &kp SEMICOLON
&kp LEFT_SHIFT  &kp LEFT_SHIFT  &kp LEFT_COMMAND  &trans          &kp DOUBLE_QUOTES  &trans      &trans  &kp SINGLE_QUOTE  &trans            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_SHIFT
&trans          &mkp RCLK       &mkp LCLK         &trans          &kp SPACE          &trans      &trans  &kp BACKSPACE                                                            &trans
            >;
        };

        NUM {
            bindings = <
&kp ESC     &kp LS(LC(TAB))  &kp LC(TAB)   &trans              &trans                                                      &kp PERIOD     &kp N7  &kp N8  &kp N9  &kp N0
&trans      &kp LG(V)        &kp LG(C)     &kp LG(SPACE)       &trans         &kp LC(LA(KP_NUMBER_0))      &kp RA(RETURN)  &kp MINUS      &kp N4  &kp N5  &kp N6  &to_copymode
&prev_term  &kill_pane       &create_term  &next_term          &kp LG(LS(V))  &trans                       &trans          &kp N0         &kp N1  &kp N2  &kp N3  &paste
&trans      &trans           &trans        &kp LG(LC(LS(N4)))  &kp SPACE      &kp LS(LA(F))                &trans          &kp BACKSPACE                          &kp RIGHT_COMMAND
            >;
        };

        ARROW {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10                                                  &kp RA(RC(Y))  &kp RA(RC(U))  &kp RA(RC(I))  &kp RA(RC(O))  &trans
&trans  &kp F4  &kp F5  &kp F6  &kp F11              &kp LA(RETURN)      &kp RA(RETURN)  &kp LEFT       &kp DOWN       &kp UP_ARROW   &kp RIGHT      &kp RC(RA(RETURN))
&trans  &kp F1  &kp F2  &kp F3  &kp F12              &trans              &trans          &kp RA(RC(N))  &kp RA(RC(Q))  &kp RA(RC(E))  &trans         &trans
&trans  &trans  &trans  &trans  &mt LA(LCTRL) SPACE  &kp LEFT_SHIFT      &kp RIGHT_ALT   &trans                                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
